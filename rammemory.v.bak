module RamMemory(clock, RamInit, WE, D, Address, Q);
	
	parameter SIZE = 8, addressSIZE = 5;
	
	input clock, RamInit, WE;
	input [SIZE-1:0] D;
	input [addressSIZE-1:0] Address;
	output reg [SIZE-1:0] Q;
	
	reg [SIZE-1:0] Memory [1<<addressSIZE:0]; 
	
	//assign Q = WE?Q:Memory[Address];
	
	always@(posedge clock) begin
	  if(RamInit)
	    Memory[5'b00000]	= 8'b10000000;
			Memory[5'b00001]	= 8'b00111110;
			Memory[5'b00010]	= 8'b10000000;
			Memory[5'b00011]	= 8'b00111111;
			Memory[5'b00100]	= 8'b00011110;
			Memory[5'b00101]	= 8'b01111111;
			Memory[5'b00110]	= 8'b10110000;
			Memory[5'b00111]	= 8'b11001100;
			Memory[5'b01000]	= 8'b00011111;
			Memory[5'b01001]	= 8'b01111110;
			Memory[5'b01010]	= 8'b00111111;
			Memory[5'b01011]	= 8'b11000100;
			Memory[5'b01100]	= 8'b00011110;
			Memory[5'b01101]	= 8'b01111111;
			Memory[5'b01110]	= 8'b00111110;
			Memory[5'b01111]	= 8'b11000100;
			Memory[5'b10000]	= 8'b00011110;
			Memory[5'b10001]	= 8'b11111111;
			Memory[5'b11110]	= 8'b00000000;
			Memory[5'b11111]	= 8'b00000000;

		if(WE)
			Memory[Address] = D;
		else
			Q = Memory[Address];
	end
	
	endmodule
			